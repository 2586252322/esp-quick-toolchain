#!/bin/bash

rel=${rel:-2.5.0}
make="-j 2"
which nproc >& /dev/null && make="-j $(($(nproc) + 1))"
gitopt="--depth 1 --single-branch"

gcc=${gcc:-4.8}
case $gcc in
	4.8|4.9) isl=0.12.2; xtensa_branch=call0-${gcc}.2;;
	5.2)     isl=0.12.2; xtensa_branch=xtensa-ctng-esp-5.2.0;;
	7.2)     isl=0.16.1; xtensa_branch=xtensa-ctng-7.2.0;;
	*)       echo unhandled gcc version; exit 1;;
esac

# if using LTO, in arduino's platform.txt -gcc-ar must be used instead of -ar
# -flto -Wl,-flto must be added in all {c, cpp, s}'s flags
lto=${lto:-false}

# Default to linux building if nothing else set
host=${host:-linux}
EXE=""
case "$host" in
	linux)	HOST="x86_64-linux-gnu";      AHOST="x86_64-pc-linux-gnu"; EXT=".x86_64";;
	win32)	HOST="i686-w64-mingw32";      AHOST="i686-mingw32";        EXT=".win32";    EXE=".exe";;
	win64)	HOST="x86_64-w64-mingw32";    AHOST="x86_64-mingw32";      EXT=".win64";    EXE=".exe";;
	osx)	HOST="x86_64-apple-darwin14"; AHOST="x86_64-apple-darwin"; EXT=".osx";;
	arm64)	HOST="aarch64-linux-gnu";     AHOST="aarch64-linux-gnu";   EXT=".arm64";;
	rpi)	HOST="arm-linux-gnueabihf";   AHOST="arm-linux-gnueabihf"; EXT=".rpi";;
	*)	echo "Specify host as linux, win32, win64, osx, arm64, or rpi"; exit 2;;
esac

cleangit ()
{(
	test -d "dl/$1" || { true; return; }
	echo "cleaning $1"
	cd dl/$1
	git reset --hard HEAD
	git clean -f -d
)}

clean()
{
	rm -rf arena log.* ${unfinished} xtensa-lx106-elf
	cleangit binutils-gdb-xtensa
	cleangit gcc-xtensa
	cleangit newlib-xtensa
	cleangit lx106-hal
}

set -e

unfinished="zzz-not-fully-built-yet-zzz"

case "$1" in
	clean)    clean; exit 0;;
	build)    :;;
	*)        echo "need 'clean', 'build'"; exit 1;;
esac


echo "Building GCC-$gcc"
echo "For architecture: $host"


installnative=$(pwd)/xtensa-lx106-elf.x86_64
install=$(pwd)/xtensa-lx106-elf${EXT}
mkdir -p ${install}
log=$(pwd)/log
touch ${unfinished}

gccbuild=$(gcc -dumpmachine)
configure="--prefix=${install}"
if [ "$HOST" != "" ]; then
	configure+=" --build=${gccbuild}"
	configure+=" --host=${HOST}"
fi
configure+=" --target=xtensa-lx106-elf"
configure+=" --disable-shared"
configure+=" --with-newlib --enable-threads=no --disable-__cxa_atexit"
configure+=" --disable-libgomp --disable-libmudflap --disable-nls --disable-multilib --enable-languages=c,c++"
configure+=" --disable-bootstrap"
configure+=" --enable-lto"
configure+=" --disable-libstdcxx-verbose"

if $lto; then
	export   CFLAGS_FOR_TARGET='-mlongcalls -flto -Wl,-flto -Os -g'
	export CXXFLAGS_FOR_TARGET='-mlongcalls -flto -Wl,-flto -Os -g'
else
	export   CFLAGS_FOR_TARGET='-mlongcalls -Os -g'
	export CXXFLAGS_FOR_TARGET='-mlongcalls -Os -g'
fi

echo "-------- Checking for required tools"
MISS=0
for i in flex bison autogen makeinfo autoreconf make gcc g++; do
	which $i >& /dev/null || ( echo "Missing: $i" && MISS=1 )
done
if [ $MISS -ne 0 ]; then exit; fi

export CFLAGS="-I${install}/include -pipe"
export LDFLAGS="-L${install}/lib"
export PATH="${installnative}/bin:${PATH}"
export LD_LIBRARY_PATH="${installnative}/lib"

mkdir -p arena

if [ ! -r arena/downloaded ]; then

	mkdir -p dl
	(
		cd dl
		test -d binutils-gdb-xtensa || git clone ${gitopt} https://github.com/earlephilhower/binutils-gdb-xtensa.git
		test -d gcc-xtensa          || git clone https://github.com/earlephilhower/gcc-xtensa.git
		test -d newlib-xtensa       || git clone ${gitopt} https://github.com/earlephilhower/newlib-xtensa.git
		test -d lx106-hal           || git clone ${gitopt} https://github.com/earlephilhower/lx106-hal.git
	)

	( cd dl/gcc-xtensa && git reset --hard && git checkout ${xtensa_branch} )

	# download and put tools directly in gcc directory
	# let gcc's configure deal with them in place

	gnu=ftp://gcc.gnu.org/pub/gcc/infrastructure
	for url in \
		${gnu}/gmp-6.1.0.tar.bz2 \
		${gnu}/mpfr-3.1.4.tar.bz2 \
		${gnu}/mpc-1.0.3.tar.gz \
		${gnu}/isl-${isl}.tar.bz2 \
		${gnu}/cloog-0.18.1.tar.gz \
		http://www.mr511.de/software/libelf-0.8.13.tar.gz \
		; do
	
		archive=${url##*/}
		name=${archive%.t*}
		base=${name%-*}
		ext=${archive##*.}
	
		echo "-------- getting $name"
		(cd dl; test -r $archive || wget $url)
		case "$ext" in
			gz)  (cd dl/gcc-xtensa; tar xfz ../$archive);;
			bz2) (cd dl/gcc-xtensa; tar xfj ../$archive);;
			*) echo "can't unarchive $archive"; exit 1;;
		esac
		(cd dl/gcc-xtensa; rm -f $base; ln -s $name $base)
	done

	touch arena/downloaded
fi

if [ ! -r arena/patched ]; then
	echo "-------- patching and tweaking"

	for p in patches/gcc-*.patch patches/gcc${gcc}/gcc-*.patch; do
		test -r "$p" || continue
		(cd dl/gcc-xtensa; echo "---- $p:"; patch -p1 < ../../$p)
	done
	for p in patches/bin-*.patch; do
		test -r "$p" || continue
		(cd dl/binutils-gdb-xtensa; echo "---- $p:"; patch -p1 < ../../$p)
	done
	for p in patches/lib-*.patch; do
		test -r "$p" || continue
		(cd dl/newlib-xtensa; echo "---- $p: "; patch -p1 < ../../$p)
	done
	
	# dirty-force HAL definition to binutils and gcc
	for overwrite in \
		dl/gcc-xtensa/include/xtensa-config.h \
		dl/binutils-gdb-xtensa/include/xtensa-config.h \
		; do
		(
			cat \
				dl/lx106-hal/include/xtensa/config/core-isa.h \
				dl/lx106-hal/include/xtensa/config/system.h \
			;
			cat << EOF
#define XCHAL_HAVE_FP_DIV           0
#define XCHAL_HAVE_FP_RECIP         0
#define XCHAL_HAVE_FP_SQRT          0
#define XCHAL_HAVE_FP_RSQRT         0
EOF
		) > $overwrite
	done
	
	touch arena/patched
fi


# configure build install binutils
if [ ! -r arena/binutils/jobdone ]; then
	echo "-------- gdb+binutils"
	mkdir -p arena/binutils
	(cd arena/binutils; ../../dl/binutils-gdb-xtensa/configure ${configure}) &> $log.01.binutils.conf.log
	(cd arena/binutils; make ${make}) &> $log.02.binutils.make.log
	touch arena/binutils/jobdone
fi
(cd arena/binutils; make install) &> $log.03.binutils.install.log

# add/fix link cc->gcc
(cd ${install}/bin; ln -sf xtensa-lx106-elf-gcc${EXE} xtensa-lx106-elf-cc${EXE})

if [ ! -r arena/gcc/jobdone-stage1 ]; then
	echo "-------- gcc-stage1"
	# configure gcc
	mkdir -p arena/gcc
	(cd arena/gcc; ../../dl/gcc-xtensa/configure ${configure} ${configuregcc}) &> $log.04.gcc.conf.log
	# stage 1 (build compiler)
	(cd arena/gcc; make ${make} all-gcc; make install-gcc) &> $log.05.gcc.stage1.log
	touch arena/gcc/jobdone-stage1
fi

if [ ! -r arena/gcc/jobdone-newlib ]; then
	echo "-------- newlib"
	# configure and build newlib
	mkdir -p arena/newlib
	(cd arena/newlib; ../../dl/newlib-xtensa/configure ${configure}) &> $log.06.newlib.conf.log
	(cd arena/newlib; make ${make}) &> $log.07.newlib.make.log
	touch arena/gcc/jobdone-newlib
fi
(cd arena/newlib; make install) &> $log.08.newlib.install.log


if [ ! -r arena/gcc/jobdone-stage2 ]; then
	echo "-------- gcc-stage2"
	# stage 2 (build libstdc++)
	(cd arena/gcc; make ${make}) &> $log.09.gcc.stage2.log
	touch arena/gcc/jobdone-stage2
fi
(cd arena/gcc; make install) &> $log.10.gcc.install.log

if [ ! -r arena/hal/jobdone ]; then
	echo "-------- HAL"
	mkdir -p arena/hal
	(cd dl/lx106-hal; autoreconf -i) &> $log.11.hal.boostrap.log
	(cd arena/hal; ../../dl/lx106-hal/configure --host=xtensa-lx106-elf $(echo ${configure} | sed 's/--host=[a-zA-Z0-9_-]*//')) &> $log.12.hal.conf.log
	(cd arena/hal; make ${make}) &> $log.14.hal.make.log
	touch arena/hal/jobdone
fi
(cd arena/hal; make install) &> $log.15.hal.install.log

echo "-------- Stripping binaries"
(${HOST}-strip ${install}/bin/* ${install}/libexec/gcc/xtensa-lx106-elf/*/c* ${install}/libexec/gcc/xtensa-lx106-elf/*/lto1 || true) >& $log.16.strip.log

echo "-------- applying post"
for sh in post/${gcc}*.sh; do
	[ -x "$sh" ] && $sh ${EXT}
done

echo "-------- creating package tgz"
tarball=$HOST.xtensa-lx106-elf-$(git rev-parse --short HEAD).tar.gz
(rm -rf pkg && mkdir pkg && cd pkg && cp -a ../xtensa-lx106-elf${EXT} xtensa-lx106-elf && tar zcf ../${tarball} xtensa-lx106-elf/)
tarballsize=$(stat -c%s ${tarball})
tarballsha256=$(sha256sum ${tarball} | cut -f1 -d" ")
( echo '            {' &&
  echo '              "host": "'$AHOST'",' &&
  echo '              "url": "https://github.com/earlephilhower/esp-quick-toolchain/releases/download/'${rel}'/'${tarball}'",' &&
  echo '              "archiveFileName": "'${tarball}'",' &&
  echo '              "checksum": "SHA-256:'${tarballsha256}'",' &&
  echo '              "size": "'${tarballsize}'"' &&
  echo '            },') > ${tarball}.json
rm -rf pkg

echo "all done (${install})"
rm -f ${unfinished}
